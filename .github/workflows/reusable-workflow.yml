name: Reusable Workflow

on:
  workflow_call:
    inputs:
      repository:
        description: "Repository to check out"
        required: true
        type: string
      ref:
        description: "Ref to check out"
        required: true
        type: string
      test:
        description: "Testing configuration"
        required: false
        type: boolean
        default: false
      name:
        description: Name of the build image
        required: false
        type: string
        default: test-infra/ginkgo
      dockerfile:
        description: Path to the dockerfile used to build docker image
        required: false
        type: string
        default: "prow/images/ginkgo/Dockerfile"
      context:
        description: Build context to build container from
        required: false
        type: string
        default: .
      build-args:
        description: "Additional arguments to build dockerfile, one per line. It can be used in the name=value format."
        required: false
        type: string
        default: ""
      tags:
        description: "Additional tags, one per line, that the image will be tagged with. Optionally you can pass the name in the format name=value which will be used by export-tags"
        required: false
        type: string
        default: ""
      export-tags:
        description: Export parsed tags as build-args into dockerfile. Each tag will have format TAG_x, where x is the tag name passed along with the tag
        required: false
        type: boolean
        default: false
jobs:
  get_oidc_token_job:
    permissions:
      id-token: write # This is required for requesting the JWT token
      contents: read # This is required for actions/checkout
    runs-on: ubuntu-latest
    name: A job to get OIDC token
    steps:
      - name: Checkout repository based on test flag
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.test == true && inputs.repository || 'kyma-project/test-infra' }}
          ref: ${{ inputs.test == true && inputs.ref || 'main' }}
      - name: Install Node.js and needed dependencies
        uses: ./.github/actions/expose-jwt-action/install
      - name: Expose JWT Action
        id: get_oidc
        uses: ./.github/actions/expose-jwt-action
      - name: Verify OIDC Token in Node.js
        run: |
          console.log(`Repository: ${{ inputs.repository }}`);
          console.log(`Ref: ${{ inputs.ref }}`);
          const oidc_token = "${{ steps.get_oidc.outputs.jwt }}";
          const payload = JSON.parse(Buffer.from(oidc_token.split('.')[1], 'base64').toString());

          // Define the expected values for issuer and job workflow ref
          const ISS_EXPECTED = "https://token.actions.githubusercontent.com";
          const JOB_WORKFLOW_REF_EXPECTED = "kyma-project/test-infra/.github/workflows/reusable-workflow.yml@refs/heads/main";

          // Check if the 'iss' field matches the expected value
          if (payload.iss !== ISS_EXPECTED) {
            console.error(`Issuer (iss) does not match the expected value. Found: ${payload.iss}, expected: ${ISS_EXPECTED}`);
            process.exit(1); // Exit with error if the value does not match
          } else {
            console.log("Issuer (iss) matches the expected value.");
          }

          // Check if the 'job_workflow_ref' field matches the expected value
          if (payload.job_workflow_ref !== JOB_WORKFLOW_REF_EXPECTED) {
            console.error(`Job workflow ref does not match the expected value. Found: ${payload.job_workflow_ref}, expected: ${JOB_WORKFLOW_REF_EXPECTED}`);
            process.exit(1); // Exit with error if the value does not match
          } else {
            console.log("Job workflow ref matches the expected value.");
          }
        shell: node {0}
      - uses: ./.github/actions/trigger-image-builder
        id: build
        name: Run build in image-builder
        with:
          oidc-token: ${{ steps.get_oidc.outputs.jwt }}
          ado-token: ${{ secrets.ADO_PAT }}
          context: ${{ inputs.context }}
          build-args: ${{ inputs.build-args }}
          tags: ${{ inputs.tags }}
          export-tags: ${{ inputs.export-tags }}
          image-name: ${{ inputs.name }}
          dockerfile: ${{ inputs.dockerfile }}
      - run: echo ${{ toJson(steps.build.outputs) }} # TODO(kacpermalachowski): Remove after implementation of output handling
        name: Show outputs
